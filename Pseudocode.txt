FUNCTION text_inverse(x_points, y_points, d, x1, y1, Bz, dBxdx, dBxdy, dBxdz, dBydy, dBydz):
    # Constants
    mu0 = 4π × 10^-7
    
    # Initialize result arrays
    num_x = length(x_points)
    num_y = length(y_points)
    M_xyz_results = zeros(3, num_x, num_y)
    r_dipole_results = zeros(3, num_x, num_y)
    errors = zeros(num_x, num_y)
    
    # Process each point in the grid
    FOR ix FROM 1 TO num_x:
        FOR iy FROM 1 TO num_y:
            # Current observation point
            r_obs = [x_points(ix), y_points(iy), d]
            
            # Find closest grid point
            target_x = x_points(ix)
            target_y = y_points(iy)
            
            # Find closest x and y indices in the measurement grid
            x_idx = index of value in x1 closest to target_x
            y_idx = index of value in y1 closest to target_y
            
            # Get magnetic field value at current point
            B_or = Bz(x_idx, y_idx)
            
            # Get gradient tensor values
            dBxdx_current = dBxdx(x_idx, y_idx)
            dBxdy_current = dBxdy(x_idx, y_idx)
            dBxdz_current = dBxdz(x_idx, y_idx)
            dBydy_current = dBydy(x_idx, y_idx)
            dBydz_current = dBydz(x_idx, y_idx)
            
            # Build tensor matrix
            D1 = [
                [dBxdx_current, dBxdy_current, dBxdz_current],
                [dBxdy_current, dBydy_current, dBydz_current],
                [dBxdz_current, dBydz_current, -dBxdx_current-dBydy_current]
            ]
            
            # Calculate eigenvalues and eigenvectors
            [V, eigenvalues] = eigen_decomposition(D1)
            eigenvalues = diagonal_elements(eigenvalues)
            
            # Save original eigenvalues and eigenvectors
            original_lambda = eigenvalues
            original_V = V
            
            # Generate all possible permutations of eigenvalues
            combinations = permutations(eigenvalues)
            
            # Define condition functions
            condition1(x) = (2*x[2] + x[1])/(x[2]-x[1]) >= 0
            condition2(x) = (2*x[2] + x[1])/(x[2]-x[1]) <= 1
            
            # Find permutations that satisfy all conditions
            valid_combinations = []
            valid_indices = []
            
            FOR i FROM 1 TO size(combinations, 1):
                current = combinations[i]
                IF condition1(current) AND condition2(current):
                    # Find indices matching the original eigenvalues
                    indices = new array of zeros(1, length(current))
                    FOR j FROM 1 TO length(current):
                        possible_indices = indices where abs(original_lambda - current[j]) < 10^-10
                        used_indices = indices[1 to j-1]
                        available_indices = possible_indices - used_indices
                        IF available_indices is not empty:
                            indices[j] = first value in available_indices
                        END IF
                    END FOR
                    
                    APPEND current TO valid_combinations
                    APPEND indices TO valid_indices
                END IF
            END FOR
            
            # Process permutations that satisfy conditions
            IF valid_combinations is not empty:
                # Score each valid combination
                scores = valid_combinations(:,1) + 2*valid_combinations(:,2)
                
                # Sort by descending score and select best combination
                idx = indices of scores sorted in descending order
                final_lambda = valid_combinations[idx[1]]
                final_indices = valid_indices[idx[1]]
                final_V = V[:, final_indices]
                
                # Calculate parameters
                lambda_1 = final_lambda[1]
                lambda_2 = final_lambda[2]
                lambda_3 = final_lambda[3]
                
                sin_theta_squared = (2*lambda_2 + lambda_1) / (lambda_2 - lambda_1)
                cos_theta_squared = 1 - sin_theta_squared
                
                # Four possible combinations of sin and cos theta
                sin_thetas = [√sin_theta_squared, -√sin_theta_squared, √sin_theta_squared, -√sin_theta_squared]
                cos_thetas = [√cos_theta_squared, √cos_theta_squared, -√cos_theta_squared, -√cos_theta_squared]
                
                # Initialize arrays for each combination
                combo_errors = zeros(1, 4)
                combo_M_xyz = zeros(3, 4)
                combo_r_xyz = zeros(3, 4)
                
                # Process all combinations
                FOR combo FROM 1 TO 4:
                    sin_theta = sin_thetas[combo]
                    cos_theta = cos_thetas[combo]
                    
                    n = [cos_theta, sin_theta, 0]
                    n1 = n[1]
                    n2 = n[2]
                    
                    # Calculate magnetic moment components
                    M1 = lambda_1 * n1 * (5 * n2^2 - 1) / (1 + n1^2)
                    M2 = lambda_1 * n2 * (1 - 5 * n1^2) / (1 + n1^2)
                    M3 = 0
                    M_calc = [M1, M2, M3]
                    
                    # Coordinate transformation
                    Q = inverse(final_V)
                    alpha = Q[1,:]
                    beta = Q[2,:]
                    gamma = Q[3,:]
                    
                    # Normalize
                    f_norm = √(alpha[1]^2 + beta[1]^2 + gamma[1]^2)
                    s_norm = √(alpha[2]^2 + beta[2]^2 + gamma[2]^2)
                    t_norm = √(alpha[3]^2 + beta[3]^2 + gamma[3]^2)
                    
                    A = [
                        [alpha[1]/f_norm, alpha[2]/s_norm, alpha[3]/t_norm],
                        [beta[1]/f_norm, beta[2]/s_norm, beta[3]/t_norm],
                        [gamma[1]/f_norm, gamma[2]/s_norm, gamma[3]/t_norm]
                    ]
                    
                    # Transform to xyz coordinate system
                    n_xyz = A\n  # Solve linear system
                    M_xyz = A\M_calc  # Solve linear system
                    
                    # Calculate r
                    r = 3 * B_or / (((3 * M_xyz[1] * n_xyz[1] + 3 * M_xyz[2] * n_xyz[2] + 3 * M_xyz[3] * n_xyz[3]) * n_xyz[3]) - M_xyz[3])
                    
                    # Calculate position vector
                    r_xyz = r * n_xyz
                    M_xyz = (4*π*r^4)*M_xyz/(3*mu0)
                    
                    # Calculate magnetic field and compare error
                    r_mag = magnitude(r_xyz)
                    B_calculated = (mu0/(4*π)) * (3*(dot_product(M_xyz,r_xyz)*r_xyz)/(r_mag^5) - M_xyz/(r_mag^3))
                    combo_errors[combo] = magnitude(B_calculated[3] - B_or)
                    combo_M_xyz[:,combo] = M_xyz
                    combo_r_xyz[:,combo] = r_xyz
                END FOR
                
                # Select best combination
                [min_error, best_combo] = minimum value and index in combo_errors
                
                # Store results
                M_xyz_results[:,ix,iy] = combo_M_xyz[:,best_combo]
                r_dipole_results[:,ix,iy] = r_obs - combo_r_xyz[:,best_combo]
                errors[ix,iy] = min_error
            ELSE:
                # Mark as invalid result if no valid solution found
                M_xyz_results[:,ix,iy] = [NaN, NaN, NaN]
                r_dipole_results[:,ix,iy] = [NaN, NaN, NaN]
                errors[ix,iy] = Infinity
            END IF
        END FOR
    END FOR
    
    # Prepare result arrays for return
    x_estimates = reshape(r_dipole_results[1,:,:], [num_x*num_y, 1])
    y_estimates = reshape(r_dipole_results[2,:,:], [num_x*num_y, 1])
    z_estimates = reshape(r_dipole_results[3,:,:], [num_x*num_y, 1])
    
    Mx_estimates = reshape(M_xyz_results[1,:,:], [num_x*num_y, 1])
    My_estimates = reshape(M_xyz_results[2,:,:], [num_x*num_y, 1])
    Mz_estimates = reshape(M_xyz_results[3,:,:], [num_x*num_y, 1])
    
    RETURN x_estimates, y_estimates, z_estimates, Mx_estimates, My_estimates, Mz_estimates
END FUNCTION